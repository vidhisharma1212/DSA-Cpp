#include <iostream>
using namespace std;

class Node{
    public:
    int val;
    Node* next;
    Node(int data){
        val=data;
        next=NULL;
    }
};

class LinkedList{
    public:
    Node* head;
    LinkedList(){
        head=NULL;
    }
    void insertAtTail(int data){
        Node* newnode= new Node(data);
        if (head==NULL){
            head=newnode;
            return;
        }
        Node* temp=head;
        while (temp->next!=NULL){
            temp=temp->next;
        }
        temp->next= newnode;
    }
    
    void insertAtHead(int data){
        Node* newnode= new Node(data);
        if (head==NULL){
            head=newnode;
            return;
        }
        newnode->next= head;
        head=newnode;
    }
    
    void display(){
        Node* temp=head;
        while (temp!=NULL){
            cout<<temp->val<<"->";
            temp=temp->next;
        }
        cout<<"NULL\n";
    }
    
};

int length(Node* head){
        Node* temp=head;
        int len=0;
        while (temp!=NULL){
            len++;
            temp=temp->next;
        }
        return len;
    }

Node* alternateFrontBack(Node* &head){
    Node* slow= head;
    Node* fast= head;
    while(fast && fast->next){
        slow=slow->next;
        fast=fast->next->next;
    }
    Node* curr;
    Node* prev;
    prev= slow;
    curr=slow->next;
    slow->next=NULL;
    
    while(curr){
        Node* rightofcurr= curr->next;
        curr->next=prev;
        prev=curr;
        curr=rightofcurr;
    }
    
    Node* p1= head;
    Node* p2= prev;
    while(p1!=p2){
        Node* temp=p1->next;
        p1->next=p2;
        p1=p2;
        p2=temp;
    }
    
    return head;
}

int main() {
    LinkedList l1;
    l1.insertAtHead(3);
    l1.insertAtHead(2);
    l1.insertAtHead(1);
    l1.insertAtTail(4);
    l1.insertAtTail(5);
    l1.insertAtTail(6);
    l1.display();
    l1.head=alternateFrontBack(l1.head);
    l1.display();
    return 0;
}
