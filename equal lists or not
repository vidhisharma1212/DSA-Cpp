#include <iostream>
using namespace std;

class Node{
    public:
    int val;
    Node* next;
    Node(int data){
        val=data;
        next=NULL;
    }
};

class LinkedList{
    public:
    Node* head;
    LinkedList(){
         head=NULL;
    }


    void insertAtTail(int data){
        Node* new_node= new Node(data);
        if (head==NULL){
            head= new_node;
            return;
        }
        
        Node* temp= head;
        while(temp->next!=NULL){
            temp=temp->next;
        }
        temp->next= new_node;
        
    }
    
    void display(){
        Node* temp= head;
        while(temp!=NULL){
            cout<<temp->val<<"->";
            temp= temp->next;
        }
        cout<<"NULL"<<endl;
    }
    
    int leng(){
        Node* temp= head;
        int count=0;
        while(temp!=NULL){
            temp=temp->next;
            count++;
        }
        return count;
    }
     
};

void equalNotequal(LinkedList li1, LinkedList li2){
    if (li1.leng()!=li2.leng()){
        cout<<"Not equal because of different sizes.\n";
        return;
    }
    //else
    Node* t1=li1.head;
    Node* t2=li2.head;
    int equal=1;
    while(t1!=NULL){
        if (t1->val!=t2->val){
            cout<<"Not equal because of unmatched elements.\n";
            equal=0;
            break;
        }
        t1=t1->next;
        t2=t2->next;
    }
    if (equal==1){
        cout<<"Equal\n";
    }
}

int main() {
    LinkedList l1;
    l1.insertAtTail(1);
    l1.insertAtTail(0);
    l1.insertAtTail(3);
    l1.insertAtTail(2);
    l1.insertAtTail(4);
    l1.display();
    
    LinkedList l2;
    l2.insertAtTail(1);
    l2.insertAtTail(0);
    l2.insertAtTail(3);
    l2.insertAtTail(2);
    l2.insertAtTail(4);
    l2.display();
    
    LinkedList l3;
    l3.insertAtTail(1);
    l3.insertAtTail(0);
    l3.insertAtTail(3);
    l3.insertAtTail(4);
    l3.insertAtTail(4);
    l3.display();
    
    LinkedList l4;
    l4.insertAtTail(1);
    l4.insertAtTail(1);
    l4.insertAtTail(0);
    l4.insertAtTail(3);
    l4.insertAtTail(4);
    l4.insertAtTail(4);
    l4.display();
    
    equalNotequal(l1,l2);
    equalNotequal(l1,l3);
    equalNotequal(l2,l4);

    return 0;
}
